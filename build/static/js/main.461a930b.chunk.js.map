{"version":3,"sources":["load.gif","github.jpg","gitlab.jpg","components/Users.js","components/Repos.js","components/UserInfo.js","components/GitProfile.js","App.js","reportWebVitals.js","index.js"],"names":["Users","props","userDetails","setVcs","chosenVcs","vcsOptions","option","usersResult","map","user","key","userBlock","className","error","id","onClick","ev","login","username","toggleResult","childClass","activeClass","document","getElementsByClassName","length","parentNode","classToShow","i","addEventListener","Repos","repoContent","repo","repoName","repoDesc","repoBirth","commitMsg","msg","UserInfo","href","html_url","web_url","alt","src","avatar_url","bio","location","twitter","twitter_username","followers","following","GitProfile","state","isLoaded","nameGitHub","nameGitLab","this","fetch","then","res","json","result","setState","catch","console","log","getRepos","prevProps","loadingGif","React","Component","App","handleInputChange","bind","handleOnSubmit","getUser","inputName","busyLoading","target","value","preventDefault","parseInt","onSubmit","type","required","onChange","name","github","gitlab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.461a930b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/load.04c24afa.gif\";","export default __webpack_public_path__ + \"static/media/github.896c50f9.jpg\";","export default __webpack_public_path__ + \"static/media/gitlab.d6a1aea1.jpg\";","import React from \"react\";\nimport \"./Users.css\";\n\n/**\n * Users function to display the names of users found on each VCS (github and gitlab)\n * @param {*} props\n * @returns\n */\nfunction Users(props) {\n  //passing states down as props\n  const { userDetails, setVcs, chosenVcs } = props;\n\n  //array to hold our two VCS titles\n  const vcsOptions = [\"GitHub\", \"GitLab\"];\n\n  //option variable for the 2 VCS options\n  let option = 0;\n\n  //iterate through the user details from the API's response\n  let usersResult = userDetails.map((user, key) => {\n    //the user block divs for a VCS\n    let userBlock;\n\n    //if we are currently on the first index of vcsOptions we display GitHub user\n    if (vcsOptions[option] === \"GitHub\") {\n      /**\n       * each user block holds the found user's name as well as the VCS's name on top\n       * depending on the div class, the user's details will be displayed or hidden\n       *\n       * we also add the setVcs function as an onClick event trigger which tells the program which VCS\n       * has been chosen to display user details\n       */\n      userBlock = (\n        <div\n          key={key}\n          className={option === chosenVcs ? \"user-block display\" : \"user-block\"}\n        >\n          <h3 className=\"vcs-title\">GitHub</h3>\n          {\"error\" in user ? (\n            <p>{user.error}</p>\n          ) : (\n            <p className=\"user-name\" id={option} onClick={(ev) => setVcs(ev)}>\n              Account: {user.login}\n            </p>\n          )}\n        </div>\n      );\n      /**\n       * same steps as for the GitHub user above\n       */\n    } else if (vcsOptions[option] === \"GitLab\") {\n      userBlock = (\n        <div\n          key={key}\n          className={option === chosenVcs ? \"user-block display\" : \"user-block\"}\n        >\n          <h3 className=\"vcs-title\">GitLab</h3>\n          {\"error\" in user ? (\n            <p>{user.error}</p>\n          ) : (\n            <p className=\"user-name\" id={option} onClick={(ev) => setVcs(ev)}>\n              Account: {user.username}\n            </p>\n          )}\n        </div>\n      );\n    }\n    //increment the option variable\n    option++;\n    //return each userBlock for a VCS\n    return userBlock;\n  });\n\n  //function to toggle off the display class of VCS when another VCS's user is clicked\n  function toggleResult(childClass) {\n    //find the class that is active (displayed)\n    let activeClass = document.getElementsByClassName(\"display\");\n    //if there is user content being displayed we change the class to a blank to hide it\n    if (activeClass.length > 0) {\n      activeClass[0].className = \"user-block\";\n      childClass.parentNode.className += \" display\";\n    }\n    //since this function is passed to an event listener, the parentnode of the element clicked will be switched to 'display'\n  }\n\n  //the class of the elements showing the user names per VCS\n  let classToShow = document.getElementsByClassName(\"user-name\");\n  //iterate through each class element\n  for (let i = 0; i < classToShow.length; i++) {\n    //attach an event listener to toggle off the display of the currently active element when new one is clicked\n    classToShow[i].addEventListener(\"click\", toggleResult(classToShow[i]));\n  }\n\n  //return the the users found\n  return <div className=\"users-row\">{usersResult}</div>;\n}\n\nexport default Users;\n","import React from \"react\";\nimport \"./Repos.css\";\n\n//function to display the repositories for a user in a VCS\nfunction Repos(props) {\n  //passing the repoContent state as props\n  const { repoContent } = props;\n\n  /**\n   * this displays the repo content incase user has repos.\n   * content includes title, description, date and commits\n   */\n  if (\"error\" in repoContent[0]) {\n    return <div>{repoContent[0].error}</div>;\n  } else {\n    return repoContent.map((repo, key) => {\n      return (\n        <div key={key}>\n          <div className=\"repo-div\">\n            <div className=\"repo-title\">\n              <p className=\"repo-name\">{repo.repoName}</p>\n              <p>\n                {\" \"}\n                <span className=\"repo-description\"> {repo.repoDesc} </span>\n              </p>\n              <div className=\"repo-date\">\n                <p>Created on: {repo.repoBirth}</p>\n              </div>\n            </div>\n\n            <div className=\"repo-commit-title\">\n              <p>Commit Feed</p>\n            </div>\n\n            <div className=\"commit-msg-div\">\n              <ul>\n                {repo.commitMsg.map((msg, key) => (\n                  <li className=\"commit-msg\" key={key}>\n                    {msg}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  //returns either 'no repo' text or the repo content\n  //return <div>{\"error\" in repoContent[0] ? repoContent[0].error : repos}</div>;\n}\n\nexport default Repos;\n","import React from \"react\";\nimport \"./UserInfo.css\";\nimport * as FaIcons from \"react-icons/fa\";\nimport * as ImIcons from \"react-icons/im\";\nimport * as BsIcons from \"react-icons/bs\";\n\n//UserInfo component to display details about each user (name, bio, location, twitter)\nconst UserInfo = (props) => {\n  const { userDetails, chosenVcs } = props;\n  return (\n    <>\n      <div className=\"top-container\">\n        <div className=\"row\">\n          {/**button to visit the user's git profile */}\n\n          <span>\n            <a\n              href={\n                \"html_url\" in userDetails[chosenVcs]\n                  ? userDetails[chosenVcs].html_url\n                  : userDetails[chosenVcs].web_url\n              }\n            >\n              <button className=\"profile-btn\">Visit Profile</button>\n            </a>\n          </span>\n          <div className=\"profile-pic-div\">\n            <img\n              alt=\"profile pic\"\n              className=\"profile-pic\"\n              src={userDetails[chosenVcs].avatar_url}\n            ></img>\n          </div>\n\n          {/**icons for username, bio, location and twitter address */}\n\n          <div className=\"user-details\">\n            <ul className=\"user-detail-list\">\n              <li>\n                <span>\n                  <span className=\"icons\">\n                    {\" \"}\n                    <FaIcons.FaUserAstronaut />{\" \"}\n                  </span>\n                  &emsp;\n                  {\"login\" in userDetails[chosenVcs]\n                    ? userDetails[chosenVcs].login\n                    : userDetails[chosenVcs].username}\n                </span>\n              </li>\n              <li>\n                <span>\n                  <span className=\"icons\">\n                    <BsIcons.BsFillChatRightQuoteFill />\n                  </span>\n                  &emsp; {userDetails[chosenVcs].bio}\n                </span>\n              </li>\n              <li>\n                <span>\n                  <span className=\"icons\">\n                    <ImIcons.ImLocation2 />\n                  </span>\n                  &emsp; {userDetails[chosenVcs].location}\n                </span>\n              </li>\n              <li>\n                <span>\n                  <span className=\"icons\">\n                    <FaIcons.FaTwitter />\n                  </span>\n                  &emsp;\n                  {\"twitter\" in userDetails[chosenVcs]\n                    ? userDetails[chosenVcs].twitter\n                    : userDetails[chosenVcs].twitter_username}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"lower-container\">\n        <p className=\"follower\">\n          Followers: {userDetails[chosenVcs].followers}\n        </p>\n        <p className=\"following\">\n          Following: {userDetails[chosenVcs].following}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default UserInfo;\n","import React from \"react\";\nimport Repos from \"./Repos\";\nimport UserInfo from \"./UserInfo\";\nimport loadingGif from \"../load.gif\";\nimport \"./UserInfo.css\";\n\n/**\n * GitProfile class to act as component\n */\nclass GitProfile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //states\n    this.state = {\n      //check if data is loaded\n      isLoaded: false,\n      //stores repo details from response\n      repoContent: null,\n    };\n  }\n\n  //function to fetchthe chosen VCS repo for a user\n  getRepos(nameGitHub, nameGitLab) {\n    /**\n     * if chosenVCS = 0 (github), we fetch github repo, set isLoaded to true to indicate we got a response,\n     * store the response to repoContent\n     */\n    if (this.props.chosenVcs === 0) {\n      fetch(`/github/repo/${nameGitHub}`)\n        .then((res) => res.json())\n        .then((result) => {\n          this.setState({\n            isLoaded: true,\n            repoContent: result,\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n\n      /**\n       * if chosenVCS = 1 (gitlab), we fetch gitlab repo, set isLoaded to true to indicate we got a response,\n       * store the response to repoContent\n       */\n    } else if (this.props.chosenVcs === 1) {\n      fetch(`/gitlab/repo/${nameGitLab}`)\n        .then((res) => res.json())\n        .then((result) => {\n          this.setState({\n            isLoaded: true,\n            repoContent: result,\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n\n  //action to run when component is mounted\n  componentDidMount() {\n    //the name of user on github\n    const nameGitHub = this.props.userDetails[0].login;\n    //name of user on gitlab\n    const nameGitLab = this.props.userDetails[1].username;\n\n    //fetch the repos when component is mounted\n    this.getRepos(nameGitHub, nameGitLab);\n  }\n\n  //action to run when a component prop/state is updated\n  componentDidUpdate(prevProps) {\n    //the name of user on github\n    const nameGitHub = this.props.userDetails[0].login;\n    //name of user on gitlab\n    const nameGitLab = this.props.userDetails[1].username;\n\n    //if the new chosen VCS is different from the previous\n    if (this.props.chosenVcs !== prevProps.chosenVcs) {\n      //set isLoaded to false\n      this.setState({\n        isLoaded: false,\n      });\n      //fetch repos based on the new chosen VCS\n      this.getRepos(nameGitHub, nameGitLab);\n    }\n  }\n\n  render() {\n    //state needed for render\n    const { isLoaded, repoContent } = this.state;\n    //states passed down as props\n    const { userDetails, chosenVcs } = this.props;\n\n    /**\n     * if not loaded yet, indicate that the repos are being fetched with message and gif\n     */\n    if (!isLoaded) {\n      return (\n        <div className=\"profile-div\">\n          <UserInfo userDetails={userDetails} chosenVcs={chosenVcs} />\n          <div className=\"loading-block\">\n            <h2>Repos on the way...</h2>\n            <img\n              className=\"loading-img\"\n              src={loadingGif}\n              alt=\"loading gif\"\n            ></img>\n          </div>\n        </div>\n      );\n      /**\n       * else mount the Repos component to display the repos contents\n       */\n    } else {\n      return (\n        <div className=\"profile-div\">\n          <UserInfo userDetails={userDetails} chosenVcs={chosenVcs} />\n          <div className=\"repos-main-title\">\n            <h2>Repositories</h2>\n          </div>\n          <div>\n            <Repos repoContent={repoContent} />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default GitProfile;\n","import React from \"react\";\nimport * as FaIcons from \"react-icons/fa\";\nimport \"./App.css\";\nimport loadingGif from \"./load.gif\";\nimport github from \"./github.jpg\";\nimport gitlab from \"./gitlab.jpg\";\nimport Users from \"./components/Users\";\nimport GitProfile from \"./components/GitProfile\";\n\n/**\n * App class to act as main component\n */\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    //handle function binding\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\n    this.getUser = this.getUser.bind(this);\n    this.setVcs = this.setVcs.bind(this);\n\n    //states\n    this.state = {\n      //name inserted for search\n      inputName: \"\",\n      //check if data are busy loading\n      busyLoading: false,\n      //check if data is loaded\n      isLoaded: false,\n      //response with user results\n      userDetails: null,\n      //chosen VCS (0 for github, 1 for gitlab)\n      chosenVcs: null,\n    };\n  }\n\n  //handle function to monitor input value of car ID\n  handleInputChange(ev) {\n    this.setState({\n      inputName: ev.target.value,\n    });\n  }\n\n  //function to fetch users info\n  getUser() {\n    fetch(\"/user/\" + this.state.inputName)\n      .then((res) => res.json())\n      .then((result) => {\n        //returns the response\n        this.setState({\n          //set busy loading to false\n          busyLoading: false,\n          //is loaded to true (indicates we got a response)\n          isLoaded: true,\n          //store the response\n          userDetails: result,\n        });\n      })\n      //catch errors\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  //handle function for when input form is submitted\n  handleOnSubmit(ev) {\n    //prevent form from reloading page when submitted\n    ev.preventDefault();\n    //sets busy loading to true\n    this.setState({\n      busyLoading: true,\n      isLoaded: false,\n      userDetails: null,\n      chosenVcs: null,\n    });\n\n    //fetch the user data\n    this.getUser();\n  }\n\n  //handle function to set the chosen VCS based on the name clicked on (each name text has an ID attribute, 0 and 1)\n  setVcs(ev) {\n    this.setState({\n      chosenVcs: parseInt(ev.target.id),\n    });\n  }\n\n  render() {\n    //states used in render\n    const { isLoaded, busyLoading, chosenVcs, userDetails } = this.state;\n\n    /**\n     * if results haven't loaded yet, we display the search bar and main page\n     */\n    if (!isLoaded) {\n      return (\n        <div className=\"App\">\n          <div className=\"heading\">\n            <h1>Search Engine</h1>\n          </div>\n          <div className=\"main-page\">\n            <div className=\"search-block\">\n              <form\n                className=\"search\"\n                onSubmit={(ev) => this.handleOnSubmit(ev)}\n              >\n                <input\n                  type=\"text\"\n                  required\n                  onChange={(ev) => this.handleInputChange(ev)}\n                  name=\"input\"\n                />\n                <button type=\"submit\" className=\"search-btn\">\n                  <FaIcons.FaSearch />\n                </button>\n              </form>\n            </div>\n            <div>\n              <span>\n                <img\n                  className=\"background-img\"\n                  src={github}\n                  alt=\"github-logo\"\n                />\n                <img\n                  className=\"background-img\"\n                  src={gitlab}\n                  alt=\"gitlab-logo\"\n                />\n              </span>\n            </div>\n\n            <div>\n              {/**if results are being loaded display the loading animation */}\n              {busyLoading ? (\n                <img\n                  className=\"loading-img\"\n                  src={loadingGif}\n                  alt=\"loading gif\"\n                ></img>\n              ) : null}\n            </div>\n          </div>\n        </div>\n      );\n      /**\n       * else if results are loaded, we display the search bar and mainpage again, with the names found\n       * from Users component\n       */\n    } else {\n      return (\n        <div className=\"App\">\n          <div className=\"heading\">\n            <h1>Search Engine</h1>\n          </div>\n          <div className=\"main-page\">\n            <div className=\"search-block\">\n              <form\n                className=\"search\"\n                onSubmit={(ev) => this.handleOnSubmit(ev)}\n              >\n                <input\n                  type=\"text\"\n                  required\n                  onChange={(ev) => this.handleInputChange(ev)}\n                  name=\"input\"\n                />\n                <button type=\"submit\" className=\"search-btn\">\n                  <FaIcons.FaSearch />\n                </button>\n              </form>\n            </div>\n            <div>\n              <span>\n                <img\n                  className=\"background-img\"\n                  src={github}\n                  alt=\"github-logo\"\n                />\n                <img\n                  className=\"background-img\"\n                  src={gitlab}\n                  alt=\"gitlab-logo\"\n                />\n              </span>\n            </div>\n            <Users\n              userDetails={userDetails}\n              setVcs={this.setVcs}\n              chosenVcs={chosenVcs}\n            />\n            {/**we mount the GitProfile component only if chosenVCS is 0 or 1 */}\n            {chosenVcs === null ? null : (\n              <GitProfile userDetails={userDetails} chosenVcs={chosenVcs} />\n            )}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}