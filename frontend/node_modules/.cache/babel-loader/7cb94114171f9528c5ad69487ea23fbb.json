{"ast":null,"code":"var _jsxFileName = \"/home/dan-sampai/Desktop/Git-ReactApp/frontend/src/components/Users.js\";\nimport React, { useEffect } from \"react\";\nimport \"./Users.css\";\n/**\n * Users function to display the names of users found on each VCS (github and gitlab)\n * @param {*} props\n * @returns\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Users = _ref => {\n  let {\n    userDetails,\n    setVcs,\n    chosenVcs\n  } = _ref;\n  //passing states down as props\n  //array to hold our two VCS titles\n  const vcsOptions = [\"GitHub\", \"GitLab\"]; //option variable for the 2 VCS options\n\n  let option = 0; // useEffect(() => {}, [userDetails]);\n  //iterate through the user details from the API's response\n\n  let usersResult = userDetails.map((user, key) => {\n    //the user block divs for a VCS\n    let userBlock; //if we are currently on the first index of vcsOptions we display GitHub user\n\n    if (vcsOptions[option] === \"GitHub\") {\n      console.log(option);\n      /**\n       * each user block holds the found user's name as well as the VCS's name on top\n       * depending on the div class, the user's details will be displayed or hidden\n       *\n       * we also add the setVcs function as an onClick event trigger which tells the program which VCS\n       * has been chosen to display user details\n       */\n\n      userBlock = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: option === chosenVcs ? \"user-block left display github \" : \"user-block left github\",\n        onClick: ev => setVcs(ev),\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"vcs-title github\",\n          children: \"GitHub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), \"error\" in user ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: user.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"user-name github\",\n          children: [\"Account: \", user.login]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n      /**\n       * same steps as for the GitHub user above\n       */\n    } else if (vcsOptions[option] === \"GitLab\") {\n      userBlock = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: option === chosenVcs ? \"user-block right display gitlab\" : \"user-block right gitlab\",\n        onClick: ev => setVcs(ev),\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"vcs-title gitlab\",\n          children: \"GitLab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), \"error\" in user ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: user.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"user-name gitlab\",\n          children: [\"Account: \", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    } //increment the option variable\n\n\n    option++; //return each userBlock for a VCS\n\n    return userBlock;\n  }); //function to toggle off the display class of VCS when another VCS's user is clicked\n\n  const toggleResult = childClass => {\n    //find the class that is active (displayed)\n    let activeClass = document.getElementsByClassName(\"display\"); //if there is user content being displayed we change the class to a blank to hide it\n\n    if (activeClass.length > 0) {\n      activeClass[0].className = \"user-block\";\n      childClass.parentNode.className += \" display\";\n    } //since this function is passed to an event listener, the parentnode of the element clicked will be switched to 'display'\n\n  }; //the class of the elements showing the user names per VCS\n\n\n  let classToShow = document.getElementsByClassName(\"user-name\"); //iterate through each class element\n\n  for (let i = 0; i < classToShow.length; i++) {\n    //attach an event listener to toggle off the display of the currently active element when new one is clicked\n    classToShow[i].addEventListener(\"click\", toggleResult(classToShow[i]));\n  } //return the the users found\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"users-row\",\n    children: usersResult\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["/home/dan-sampai/Desktop/Git-ReactApp/frontend/src/components/Users.js"],"names":["React","useEffect","Users","userDetails","setVcs","chosenVcs","vcsOptions","option","usersResult","map","user","key","userBlock","console","log","ev","error","login","username","toggleResult","childClass","activeClass","document","getElementsByClassName","length","className","parentNode","classToShow","i","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./Users.css\";\n\n/**\n * Users function to display the names of users found on each VCS (github and gitlab)\n * @param {*} props\n * @returns\n */\nconst Users = ({ userDetails, setVcs, chosenVcs }) => {\n  //passing states down as props\n\n  //array to hold our two VCS titles\n  const vcsOptions = [\"GitHub\", \"GitLab\"];\n\n  //option variable for the 2 VCS options\n  let option = 0;\n\n  // useEffect(() => {}, [userDetails]);\n\n  //iterate through the user details from the API's response\n  let usersResult = userDetails.map((user, key) => {\n    //the user block divs for a VCS\n    let userBlock;\n\n    //if we are currently on the first index of vcsOptions we display GitHub user\n    if (vcsOptions[option] === \"GitHub\") {\n      console.log(option);\n      /**\n       * each user block holds the found user's name as well as the VCS's name on top\n       * depending on the div class, the user's details will be displayed or hidden\n       *\n       * we also add the setVcs function as an onClick event trigger which tells the program which VCS\n       * has been chosen to display user details\n       */\n      userBlock = (\n        <div\n          key={key}\n          className={\n            option === chosenVcs\n              ? \"user-block left display github \"\n              : \"user-block left github\"\n          }\n          onClick={(ev) => setVcs(ev)}\n        >\n          <h3 className=\"vcs-title github\">GitHub</h3>\n          {\"error\" in user ? (\n            <p>{user.error}</p>\n          ) : (\n            <p className=\"user-name github\">Account: {user.login}</p>\n          )}\n        </div>\n      );\n      /**\n       * same steps as for the GitHub user above\n       */\n    } else if (vcsOptions[option] === \"GitLab\") {\n      userBlock = (\n        <div\n          key={key}\n          className={\n            option === chosenVcs\n              ? \"user-block right display gitlab\"\n              : \"user-block right gitlab\"\n          }\n          onClick={(ev) => setVcs(ev)}\n        >\n          <h3 className=\"vcs-title gitlab\">GitLab</h3>\n          {\"error\" in user ? (\n            <p>{user.error}</p>\n          ) : (\n            <p className=\"user-name gitlab\">Account: {user.username}</p>\n          )}\n        </div>\n      );\n    }\n\n    //increment the option variable\n    option++;\n    //return each userBlock for a VCS\n    return userBlock;\n  });\n\n  //function to toggle off the display class of VCS when another VCS's user is clicked\n  const toggleResult = (childClass) => {\n    //find the class that is active (displayed)\n    let activeClass = document.getElementsByClassName(\"display\");\n    //if there is user content being displayed we change the class to a blank to hide it\n    if (activeClass.length > 0) {\n      activeClass[0].className = \"user-block\";\n      childClass.parentNode.className += \" display\";\n    }\n    //since this function is passed to an event listener, the parentnode of the element clicked will be switched to 'display'\n  };\n\n  //the class of the elements showing the user names per VCS\n  let classToShow = document.getElementsByClassName(\"user-name\");\n  //iterate through each class element\n  for (let i = 0; i < classToShow.length; i++) {\n    //attach an event listener to toggle off the display of the currently active element when new one is clicked\n    classToShow[i].addEventListener(\"click\", toggleResult(classToShow[i]));\n  }\n\n  //return the the users found\n  return <div className=\"users-row\">{usersResult}</div>;\n};\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}